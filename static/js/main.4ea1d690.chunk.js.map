{"version":3,"sources":["helper/styles.js","helper/Title.js","dashboard/DashboardComponent.js","vis/SeasonCount.js","App.js","dashboard/menuItems.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","display","toolbar","paddingRight","toolbarIcon","alignItems","justifyContent","padding","mixins","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","width","enteringScreen","menuButton","marginRight","menuButtonHidden","title","flexGrow","drawerPaper","position","whiteSpace","drawerPaperClose","overflowX","spacing","breakpoints","up","appBarSpacer","content","backgroundColor","palette","type","grey","height","overflow","container","paddingTop","paddingBottom","paper","flexDirection","fixedHeight","Title","props","Typography","component","variant","color","gutterBottom","children","DashbardComponent","classes","fixedHeightPaper","clsx","className","Container","maxWidth","Grid","item","xs","md","lg","Paper","SeasonCountBar","useState","bars","setBars","alert","setAlert","legendData","setLegendData","loading","setLoading","useEffect","a","axios","get","res","turtleData","data","turtles","console","log","barElements","Object","keys","map","key","index","name","x","y","message","Alert","severity","style","flexWrap","CircularProgress","domainPadding","VictoryTheme","material","hight","orientation","colorScale","dependentAxis","offset","categories","App","React","open","setOpen","CssBaseline","AppBar","Toolbar","IconButton","edge","aria-label","onClick","noWrap","Drawer","Divider","List","window","location","pathname","selectedIndex","setSelectedIndex","handleListItemClick","event","ListItem","button","selected","Link","to","ListItemIcon","ListItemText","primary","MainListItems","exact","path","DashboardComponent","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.4ea1d690.chunk.js","sourcesContent":["import { makeStyles } from \"@material-ui/core/styles\";\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n  },\n  toolbar: {\n    paddingRight: 24, // keep right padding when drawer closed\n  },\n  toolbarIcon: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n    padding: \"0 8px\",\n    ...theme.mixins.toolbar,\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create([\"width\", \"margin\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create([\"width\", \"margin\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: 36,\n  },\n  menuButtonHidden: {\n    display: \"none\",\n  },\n  title: {\n    flexGrow: 1,\n  },\n  drawerPaper: {\n    position: \"relative\",\n    whiteSpace: \"nowrap\",\n    width: drawerWidth,\n    transition: theme.transitions.create(\"width\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  drawerPaperClose: {\n    overflowX: \"hidden\",\n    transition: theme.transitions.create(\"width\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    width: theme.spacing(7),\n    [theme.breakpoints.up(\"sm\")]: {\n      width: theme.spacing(9),\n    },\n  },\n  appBarSpacer: theme.mixins.toolbar,\n  content: {\n    backgroundColor:\n      theme.palette.type === \"light\"\n        ? theme.palette.grey[100]\n        : theme.palette.grey[900],\n    flexGrow: 1,\n    height: \"100vh\",\n    overflow: \"auto\",\n  },\n  container: {\n    paddingTop: theme.spacing(4),\n    paddingBottom: theme.spacing(4),\n  },\n  paper: {\n    padding: theme.spacing(2),\n    display: \"flex\",\n    overflow: \"auto\",\n    flexDirection: \"column\",\n  },\n  fixedHeight: {\n    height: 480,\n  },\n}));\n\nexport default useStyles;\n","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Typography from '@material-ui/core/Typography';\n\nfunction Title(props) {\n  return (\n    <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>\n      {props.children}\n    </Typography>\n  );\n}\n\nTitle.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default Title;\n","import * as React from \"react\";\nimport clsx from \"clsx\";\n\nimport Container from \"@material-ui/core/Container\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\n\nimport useStyles from \"../helper/styles\";\nimport Title from \"../helper/Title\";\n\nconst DashbardComponent = () => {\n  const classes = useStyles();\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\n  return (\n    <div>\n      <div className={classes.appBarSpacer} />\n      <Container maxWidth=\"lg\" className={classes.container}>\n        <Grid container spacing={3}>\n          {/* Paper 1 */}\n          <Grid item xs={12} md={8} lg={9}>\n            <Paper className={fixedHeightPaper}>\n              <Title>TBD</Title>\n            </Paper>\n          </Grid>\n          {/* Paper 2 */}\n          <Grid item xs={12} md={4} lg={3}>\n            <Paper className={fixedHeightPaper}>\n              <Title>TBD 2</Title>\n            </Paper>\n          </Grid>\n          {/* Paper 3 */}\n          <Grid item xs={12}>\n            <Paper className={classes.paper}>\n              <Title>TBD 3</Title>\n            </Paper>\n          </Grid>\n        </Grid>\n      </Container>\n    </div>\n  );\n};\n\nexport default DashbardComponent;\n","import React, { useEffect, useState } from \"react\";\nimport clsx from \"clsx\";\n\nimport axios from \"axios\";\n\nimport {\n  VictoryBar,\n  VictoryChart,\n  VictoryAxis,\n  VictoryTheme,\n  VictoryGroup,\n  VictoryLegend,\n} from \"victory\";\n\nimport Alert from \"@material-ui/lab/Alert\";\nimport Container from \"@material-ui/core/Container\";\nimport Paper from \"@material-ui/core/Paper\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n\nimport useStyles from \"../helper/styles\";\n\nconst SeasonCountBar = () => {\n  const [bars, setBars] = useState(<VictoryBar />);\n  const [alert, setAlert] = useState(\"\");\n  const [legendData, setLegendData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    (async () => {\n      try {\n        const res = await axios.get(\n          `https://bmd-micro.herokuapp.com/sumYearSeasonVictory`\n        );\n        const turtleData = res.data.data.turtles;\n        console.log(turtleData);\n        const barElements = Object.keys(turtleData).map((key, index) => {\n          setLegendData((legendData) => [...legendData, { name: key }]);\n          return <VictoryBar data={turtleData[key]} x=\"Period\" y=\"Count\" />;\n        });\n        setBars(barElements);\n        setLoading(false);\n      } catch (err) {\n        console.log(err.message);\n        setAlert(err.message);\n      }\n    })();\n  }, []);\n\n  const classes = useStyles();\n  const paper = clsx(classes.paper, classes.fixedHeight);\n\n  return (\n    <div>\n      <div className={classes.appBarSpacer} />\n      {alert !== \"\" && <Alert severity=\"error\">{alert}</Alert>}\n\n      <Container className={classes.container}>\n        {/* this makes it fit to to paper 👇 */}\n        <div style={{ display: \"flex\", flexWrap: \"wrap\" }}>\n          <Paper className={paper}>\n            {/* this makes it fit to to paper 👆 */}\n            <h1>Count per Season</h1>\n            {loading && <CircularProgress />}\n\n            {/* wrapper component that plots all of its children on the same scale.  */}\n            {!loading && (\n              <VictoryChart\n                // domainPadding will add space to each side of VictoryBar to\n                // prevent it from overlapping the axis\n                domainPadding={{ x: 100 }}\n                theme={VictoryTheme.material}\n                width={800}\n                hight={\"100%\"}\n              >\n                <VictoryLegend\n                  data={legendData}\n                  orientation=\"horizontal\"\n                  colorScale={\"qualitative\"}\n                />\n                <VictoryAxis dependentAxis={true} />\n                <VictoryAxis />\n                <VictoryGroup\n                  offset={10}\n                  colorScale={\"qualitative\"}\n                  categories={{ x: [\"Early\", \"Late\", \"Total\"] }}\n                >\n                  {bars}\n                </VictoryGroup>\n              </VictoryChart>\n            )}\n          </Paper>\n        </div>\n      </Container>\n    </div>\n  );\n};\n\nexport { SeasonCountBar };\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\n// Material UI\nimport { AppBar, CssBaseline, Drawer, Divider, IconButton, List, Toolbar, Typography } from \"@material-ui/core\";\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport MenuIcon from '@material-ui/icons/Menu';\n\n// Custom styling\nimport useStyles from \"./helper/styles\";\nimport clsx from \"clsx\";\n\nimport {MainListItems} from \"./dashboard/menuItems\"\nimport DashboardComponent from \"./dashboard/DashboardComponent\";\nimport { SeasonCountBar } from \"./vis/SeasonCount\";\n\nconst App = () => {\n  const classes = useStyles();\n\n  // Drawer\n  const [open, setOpen] = React.useState(true);\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Router>\n        <CssBaseline />\n        <AppBar\n          position=\"absolute\"\n          className={clsx(classes.appBar, open && classes.appBarShift)}\n        >\n          <Toolbar className={classes.toolbar}>\n            <IconButton\n              edge=\"start\"\n              color=\"inherit\"\n              aria-label=\"open drawer\"\n              onClick={handleDrawerOpen}\n              className={clsx(\n                classes.menuButton,\n                open && classes.menuButtonHidden\n              )}\n            >\n              <MenuIcon />\n            </IconButton>\n            <Typography\n              component=\"h1\"\n              variant=\"h6\"\n              color=\"inherit\"\n              noWrap\n              className={classes.title}\n            >\n              Dashboard\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <Drawer\n          variant=\"permanent\"\n          classes={{\n            paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\n          }}\n          open={open}\n        >\n          <div className={classes.toolbarIcon}>\n            <IconButton onClick={handleDrawerClose}>\n              <ChevronLeftIcon />\n            </IconButton>\n          </div>\n          <Divider />\n          <List>{MainListItems()}</List>\n          <Divider />\n        </Drawer>\n        <main className={classes.content}>\n          <Route exact path=\"/\">\n            <DashboardComponent />\n          </Route>\n          <Route path=\"/SeasonCount\">\n            <SeasonCountBar />\n          </Route>\n        </main>\n      </Router>\n    </div>\n  );\n};\n\nexport default App;\n","import * as React from \"react\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport DashboardIcon from \"@material-ui/icons/Dashboard\";\nimport AssessmentIcon from \"@material-ui/icons/Assessment\";\n\n// router dom\nimport { Link } from \"react-router-dom\";\n\nexport const MainListItems = () => {\n  const listRoute = {\n    \"/\": 0,\n    \"/SeasonCount\": 1,\n  };\n  const [selectedIndex, setSelectedIndex] = React.useState(\n    listRoute[window.location.pathname]\n  );\n\n  const handleListItemClick = (event, index) => {\n    setSelectedIndex(index);\n  };\n\n  return (\n    <div>\n      <ListItem\n        button\n        selected={selectedIndex === 0}\n        onClick={(event) => handleListItemClick(event, 0)}\n        component={Link}\n        to=\"/\"\n      >\n        <ListItemIcon>\n          <DashboardIcon />\n        </ListItemIcon>\n        <ListItemText primary=\"Dashboard\" />\n      </ListItem>\n      <ListItem\n        button\n        selected={selectedIndex === 1}\n        onClick={(event) => handleListItemClick(event, 1)}\n        component={Link}\n        to=\"/SeasonCount\"\n      >\n        <ListItemIcon>\n          <AssessmentIcon />\n        </ListItemIcon>\n        <ListItemText primary=\"Season Count\" />\n      </ListItem>\n    </div>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}